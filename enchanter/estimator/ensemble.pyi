from typing import Any, List, Union
import numpy as np
from torch import Tensor
from . import modules as modules
from .runner import BaseRunner as BaseRunner, ClassificationRunner as ClassificationRunner
from sklearn.base import BaseEstimator
from torch.utils.data import Dataset

class BaseEnsembleEstimator(BaseEstimator):
    runners: List[BaseRunner] = ...
    weights: Any = ...
    mode: Any = ...
    do_fit: bool = ...
    def __init__(self, runners: List[BaseRunner], mode: str=...) -> None: ...
    def fit(self, dataset: Dataset, epochs: int, batch_size: int, shuffle: bool=..., checkpoints: List[str]=...) -> Any: ...
    def predict(self, x: Union[Tensor, np.ndarray]) -> List[np.ndarray]: ...

class SoftEnsemble(BaseEnsembleEstimator):
    def predict(self, x: Union[Tensor, np.ndarray]) -> np.ndarray: ...

class HardEnsemble(BaseEnsembleEstimator):
    def __init__(self, runners: List[ClassificationRunner]) -> None: ...
    def predict(self, x: Union[Tensor, np.ndarray]) -> np.ndarray: ...
