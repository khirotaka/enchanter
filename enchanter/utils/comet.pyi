from typing import Dict, Optional, List, Any, Union

class TunerConfigGenerator:
    algorithm: str = ...
    spec: Dict[str, Any] = ...
    name: str = ...
    trials: int = ...
    __params = Dict[str, Dict[str, Any]]

    def __init__(self, algorithm: str = "bayes", metric: str = "validate_avg_loss", objective : str = "minimize", seed: Optional[int] = None, max_combo: int = 0, grid_size: int = 10, min_sample_size: int = 100, retry_limit: int = 20, retry_assign_limit: int = 0, name: Optional[str] = None, trials: int = 1) -> None: ...

    def __suggest(self, name: str, min_values: Union[float, int], max_values: Union[float, int], dtype: Optional[type], scaling: str, **kwargs) -> None: ...
    def suggest_categorical(self, name: str, values: List[str]) -> None: ...
    def suggest_linear(self, name: str, min_value: Union[float, int], max_value: Union[float, int], dtype: Optional[type] = ...) -> None: ...
    def suggest_uniform(self, name: str, min_value: Union[float, int], max_value: Union[float, int], dtype: Optional[type] = ...) -> None: ...
    def suggest_normal(self, name: str, min_value: Union[float, int], max_value: Union[float, int], mu: float = ..., sigma: float = ..., dtype: Optional[type] = ...) -> None: ...
    def suggest_lognormal(self, name: str, min_value: Union[float, int], max_value: Union[float, int], mu: float = ..., sigma: float = ..., dtype: Optional[type] = ...) -> None: ...
    def suggest_loguniform(self, name: str, min_value: Union[float, int], max_value: Union[float, int], dtype: Optional[type] = ...) -> None: ...
    def suggest_discrete(self, name: str, values: List[Union[float, int]]) -> None: ...
    def generate(self) -> Dict[str, Any]: ...
    def to_json(self, filename: str) -> None: ...
