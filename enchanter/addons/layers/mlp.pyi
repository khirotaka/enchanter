from typing import List, Callable, Union, Optional

from torch.tensor import Tensor
from torch.nn import Module, ModuleList

class MLP(Module):
    layers: Union[List, ModuleList] = ...
    activation: Optional[Callable[[Tensor], Tensor]] = ...

    def __init__(
            self,
            shapes: List[int],
            activation: Union[Callable[[Tensor], Tensor], Module] = ...
    ) -> None: ...
    def forward(self, x: Tensor) -> Tensor: ...


class PositionWiseFeedForward(Module):
    conv: Module = ...
    def __init__(self, d_model: int) -> None: ...
    def forward(self, x: Tensor) -> Tensor: ...
