import torch
import torch.nn as nn
from typing import List, Callable, Union

class MLP(nn.Module):
    layers: Union[List, nn.ModuleList] = ...
    activation: Callable = ...
    def __init__(
            self,
            shapes: List[int],
            activation: Union[Callable[[torch.Tensor], torch.Tensor], nn.Module] = ...
    ) -> None:
        super().__init__()
        ...
    def forward(self, x: torch.Tensor) -> torch.Tensor: ...


class PositionWiseFeedForward(nn.Module):
    conv: nn.Module
    def __init__(self, hidden_size: int) -> None:
        super().__init__()
        ...
    def forward(self, x: torch.Tensor) -> torch.Tensor: ...
