from typing import List, Callable, Union, Optional

from torch import Tensor
from numpy import ndarray


class Compose:
    transforms: List[Callable]
    def __init__(self, transforms: List[Callable]) -> None: ...
    def __call__(self, data: Union[Tensor, ndarray]) -> Union[Tensor, ndarray]: ...

class FixedWindow:
    window_size: int
    start_position: Optional[int]
    def __init__(self, window_size: int, start_position: Optional[int] = None) -> None: ...
    def __call__(self, data: Union[Tensor, ndarray]) -> Union[Tensor, ndarray]: ...

class GaussianNoise:
    noise: float
    def __init__(self, sigma: float, mu: float) -> None: ...
    def __call__(self, data: Union[Tensor, ndarray]) -> Union[Tensor, ndarray]: ...

class RandomScaling:
    scale: float
    def __init__(self, start: float, end: float) -> None: ...
    def __call__(self, data: Union[Tensor, ndarray]) -> Union[Tensor, ndarray]: ...