import torch
import enchanter
from typing import Any, Tuple, List
from torch.nn.modules.loss import _Loss
from torch.optim.optimizer import Optimizer

class ClassificationRunner(enchanter.BaseRunner):
    model: torch.nn.Module = ...
    optimizer: Optimizer = ...
    criterion: _Loss = ...
    experiment: Any = ...

    def __init__(self, model: torch.nn.Module, optimizer: Optimizer, criterion: _Loss, experiment: Any) -> None:
        super().__init__()
        ...

    def train_step(self, batch: Tuple): ...
    def train_end(self, outputs: List): ...
    def val_step(self, batch: Tuple): ...
    def val_end(self, outputs: List): ...
    def test_step(self, batch: Tuple): ...
    def test_end(self, outputs: List): ...
