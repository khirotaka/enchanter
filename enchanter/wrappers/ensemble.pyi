import numpy as np
import torch
from enchanter.engine import modules as modules
from enchanter.engine.runner import BaseRunner as BaseRunner
from sklearn.base import BaseEstimator
from typing import List, Union

class BaseEnsembleEstimator(BaseEstimator):
    runners: List[BaseRunner] = ...
    mode: str = ...
    device: torch.device = ...
    def __init__(self, runners: List[BaseRunner], mode: str=...) -> None: ...
    def predict(self, x: Union[np.ndarray, torch.Tensor]) -> List[np.ndarray]: ...

class SoftEnsemble(BaseEnsembleEstimator):
    def predict(self, x: Union[np.ndarray, torch.Tensor]) -> np.ndarray: ...

class HardEnsemble(BaseEnsembleEstimator):
    def __init__(self, runners: List[BaseRunner]) -> None: ...
    def predict(self, x: Union[np.ndarray, torch.Tensor]) -> np.ndarray: ...
