from typing import List, Union

from numpy import ndarray
from torch import Tensor, device
from sklearn.base import BaseEstimator

from enchanter.engine.runner import BaseRunner

class BaseEnsembleEstimator(BaseEstimator):
    runners: List[BaseRunner] = ...
    mode: str = ...
    device: device = ...
    def __init__(self, runners: List[BaseRunner], mode: str=...) -> None: ...
    def predict(self, x: Union[ndarray, Tensor]) -> List[ndarray]: ...

class SoftEnsemble(BaseEnsembleEstimator):
    def predict(self, x: Union[ndarray, Tensor]) -> ndarray: ...

class HardEnsemble(BaseEnsembleEstimator):
    def __init__(self, runners: List[BaseRunner]) -> None:
        super().__init__(runners)
        ...
    def predict(self, x: Union[ndarray, Tensor]) -> ndarray: ...
