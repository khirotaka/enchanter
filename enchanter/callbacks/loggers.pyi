from typing import Any, Optional, Dict, Union
from torch.utils.tensorboard import SummaryWriter

class BaseLogger:
    context: Union[str, None] = ...
    def __init__(self) -> None: ...
    def train(self) -> None: ...
    def validate(self) -> None: ...
    def test(self) -> None: ...
    def log_metric(self, name: str, value: Any, step: Optional[int] = ..., epoch: Optional[int] = ..., include_context: bool = ...) -> None: ...
    def log_metrics(self, dic: Dict, prefix: Optional[str] = ..., step: Optional[int] = ..., epoch: Optional[int] = ...) -> None: ...
    def log_parameter(self, name: str, value: Any, step: Optional[int] = ...) -> None: ...
    def log_parameters(self, dic: Dict, prefix: Optional[str] = ..., step: Optional[int] = ...) -> None: ...
    def set_model_graph(self, *args: Any, **kwargs: Any) -> None: ...

class TensorBoardLogger(BaseLogger):
    writer: SummaryWriter = ...
    def __init__(self, log_dir: str, *args: Any, **kwargs: Any) -> None:
        super().__init__()
        ...
    def log_metric(self, name: str, value: Any, step: Optional[int] = ..., epoch: Optional[int] = ..., include_context: bool = ...) -> None: ...
    def log_metrics(self, dic: Dict, prefix: Optional[str] = ..., step: Optional[int] = ..., epoch: Optional[int] = ...) -> None: ...
    def log_parameter(self, name: str, value: Any, step: Optional[int] = ...) -> None: ...
    def log_parameters(self, dic: Dict, prefix: Optional[str]=..., step: Optional[int]=...) -> Any: ...
